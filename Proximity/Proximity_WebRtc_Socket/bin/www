#!/usr/bin/env node

/**
 * Module dependencies.
 */
const fs = require('fs');
var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
const https = require('https');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);


// Certificate	
const privateKey = fs.readFileSync('/etc/letsencrypt/live/proximity.hafner.solaimani.de/privkey.pem', 'utf8');
const certificate = fs.readFileSync('/etc/letsencrypt/live/proximity.hafner.solaimani.de/cert.pem', 'utf8');
const ca = fs.readFileSync('/etc/letsencrypt/live/proximity.hafner.solaimani.de/chain.pem', 'utf8');

 const credentials = {	
	key: privateKey,	
	cert: certificate,	
	ca: ca	
};	

var server = https.createServer(credentials, app);

const io = require('socket.io')(server, {
  cors: {
      origin: 'https://launch.playcanvas.com/1142019?debug=true',
      methods: ["GET", "POST"],
      allowedHeaders: ["Access-Control-Allow-Origin"],
      credentials: true
  }
});
var players = {};
var videosId = [];
var peers = {};
function Player(id) {
  this.id = id;
  this.x = 0;
  this.y = 0;
  this.z = 0;
  this.rotx = 0;
  this.roty = 0;
  this.rotz = 0;
  this.firstUpdate = false;
  this.entity = null;
}

io.on('connection', function(socket) {

  peers[socket.id] = socket;
  
  socket.on("initialize", async function() {
    
     var id = socket.id;
     var newPlayer = new Player(id);
     players[id] = newPlayer;
     
     socket.emit("playerData", { id: id, players: players });
     socket.broadcast.emit("playerJoined", newPlayer);
     console.log(socket.id + " joined.");
     videosId.push(socket.id)
     await socket.broadcast.emit("setUpVideos", videosId);
     await socket.emit("initializeVideo", socket.id, videosId);
     // Asking all other clients to setup the peer connection receiver
    for(let id in peers) {
      if(id === socket.id) continue
      console.log('sending init receive to ' + socket.id)
     // console.log("Step 1 initReceive(Do this for all Users):");
      peers[id].emit('initReceive', socket.id)
  }
 
   });
 
   socket.on("positionUpdate", function(data) {
     if (!players[data.id]) return;
     players[data.id].x = data.x;
     players[data.id].y = data.y;
     players[data.id].z = data.z;
     players[data.id].rotx = data.rotx;
     players[data.id].roty = data.roty;
     players[data.id].rotz = data.rotz;
     players[data.id].currAnim = data.currAnim;
     if (!players[data.id].firstUpdate){
       players[data.id].firstUpdate = true;
     }
 
     socket.broadcast.emit("playerMoved", data);
    });



    

    /**
     * relay a peerconnection signal to a specific socket
     */
    socket.on('signal', data => {
        console.log('sending signal from ' + socket.id + ' to', data.socket_id)
        if(!peers[data.socket_id])return
        peers[data.socket_id].emit('signal', {
            socket_id: socket.id,
            signal: data.signal
        })
    })


    /**
     * Send message to client to initiate a connection
     * The sender has already setup a peer connection receiver
     */
    socket.on('initSend', init_socket_id => {
        console.log('INIT SEND by ' + socket.id + ' for ' + init_socket_id)
        //console.log("Step 4:");
        //Sconsole.log('INIT SEND by ' + socket.id + ' for ' + "init_socket_id")
        peers[init_socket_id].emit('initSend', socket.id)
    })
  
        // Initiate the connection process as soon as the client connects
   
        socket.on('disconnect', function() {
          socket.broadcast.emit('removePeer', socket.id)
          delete peers[socket.id];
          delete players[socket.id];
          videosId = videosId.filter(element => element !== socket.id);
          socket.broadcast.emit ('killPlayer', socket.id);
          socket.broadcast.emit("setUpVideos", videosId)
        })
  
});

console.log ('Server started.');


/**
 * Listen on provided port, on all network interfaces.
 */

 // Starting both http & https servers
 http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
    res.end();
}).listen(80);


server.listen(port,() => {
	console.log('HTTPS Server running on port ' + port);
});


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
